const zlib = require("zlib");
const fs = require("fs");
const path = require("path");
const { Builder } = require("xml2js");
const Quaternion = require("quaternion");

var builder = new Builder();

const generateYdr = (name, textureName = "texture", width, height) => {

  const hWidth = width / 2;
  const hHeight = height / 2;

  const headerBuffer = Buffer.from([
      /*0000*/0x52, 0x53, 0x43, 0x37, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xA0, 0x00, 0x00, 0x00, 0x50
  ]);

  const contentBuffer = Buffer.from([
      /*0010*/0x0D, 0xF6, 0xAA, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0020*/0x40, 0x09, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0030*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x04, 0x35, 0x40,
      /*0040*/0xFF, 0xFF, 0xFF, 0xBF, 0xB0, 0x0F, 0xA1, 0xB4, 0xFF, 0xFF, 0xFF, 0xBF, 0x00, 0x00, 0xC0, 0xFF,
      /*0050*/0xFF, 0xFF, 0xFF, 0x3F, 0xB0, 0x0F, 0xA1, 0x34, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xC0, 0xFF,
      /*0060*/0xC0, 0x01, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0070*/...Array(16).fill(0x00),
      /*0080*/0x00, 0x38, 0x1C, 0x46, 0x00, 0x38, 0x1C, 0x46, 0x00, 0x38, 0x1C, 0x46, 0x00, 0x38, 0x1C, 0x46,
      /*0090*/0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*00A0*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*00B0*/0xC0, 0x01, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
              ...Array(144).fill(0x00),
      /*0150*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(112).fill(0x00),
      /*01D0*/0x40, 0x02, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(112).fill(0x00),
      /*0250*/0xC0, 0x02, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(112).fill(0x00),
      /*02D0*/0x87, 0xF7, 0xDE, 0x8B, 0x00, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*02E0*/0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*02F0*/0x40, 0x03, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x01, 0x00,
              ...Array(208).fill(0x00),
      /*03D0*/0xFF, 0xFF, 0xFF, 0xBF, 0xB0, 0x0F, 0xA1, 0xB4, 0xFF, 0xFF, 0xFF, 0xBF, 0x00, 0x00, 0x00, 0x00,
      /*03E0*/0xFF, 0xFF, 0xFF, 0x3F, 0xB0, 0x0F, 0xA1, 0x34, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00,
              ...Array(96).fill(0x00),
      /*0450*/0xC0, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(112).fill(0x00),
      /*04D0*/0x61, 0xD4, 0xE7, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*04E0*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*04F0*/...Array(16).fill(0x00),
      /*0500*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x06, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0510*/...Array(16).fill(0x00),
      /*0520*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
      /*0530*/0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0540*/0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x05, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
              ...Array(128).fill(0x00),
      /*05D0*/0xFF, 0xFF, 0xFF, 0xBF, 0xB0, 0x0F, 0xA1, 0x34, 0xFF, 0xFF, 0xFF, 0xBF, 0x00, 0x00, 0x00, 0x00,
      /*05E0*/0x00, 0x00, 0x80, 0xBF, 0x95, 0xBF, 0x56, 0xB4, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
      /*05F0*/0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x3F, 0xB0, 0x0F, 0xA1, 0x34, 0xFF, 0xFF, 0xFF, 0xBF,
      /*0600*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF, 0x95, 0xBF, 0x56, 0xB4, 0xFF, 0xFF, 0xFF, 0xFF,
      /*0610*/0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xBF, 0xB0, 0x0F, 0xA1, 0xB4,
      /*0620*/0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF, 0x95, 0xBF, 0x56, 0xB4,
      /*0630*/0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF, 0xFF, 0xFF, 0xFF, 0x3F,
      /*0640*/0xB0, 0x0F, 0xA1, 0xB4, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF,
      /*0650*/0x95, 0xBF, 0x56, 0xB4, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0xBF,
              ...Array(112).fill(0x00),
      /*06D0*/0x30, 0xD5, 0x45, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*06E0*/0x80, 0x07, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(160).fill(0x00),
      /*0790*/0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(112).fill(0x00),
      /*0810*/0xBC, 0xBD, 0xE6, 0x34, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0820*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0830*/0xC0, 0x05, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0840*/0xC0, 0x08, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(128).fill(0x00),
      /*08D0*/0x59, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x04, 0x96, 0x69, 0x99, 0x55, 0x55, 0x55, 0x55, 0x77,
              ...Array(112).fill(0x00),
      /*0950*/0x43, 0xC3, 0x9C, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0960*/0xC0, 0x09, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(16).fill(0x00),
      /*0980*/0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(64).fill(0x00),
      /*09D0*/0x40, 0x0A, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(112).fill(0x00),
      /*0A50*/0xC0, 0x0A, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0xD5, 0x46, 0xDF, 0xE4, 0x00, 0x00, 0x00, 0x00,
      /*0A60*/0x07, 0x00, 0x00, 0x80, 0xD0, 0x00, 0x10, 0x01, 0x94, 0x15, 0xAD, 0x18, 0x00, 0x00, 0x00, 0x00,
      /*0A70*/0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(80).fill(0x00),
      /*0AD0*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0AE0*/0x01, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0B, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0AF0*/0x01, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x0B, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0B00*/0x01, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x0B, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0B10*/0x01, 0xA2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x0B, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0B20*/0x01, 0xA1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x0B, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0B30*/0x01, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0B, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0B40*/0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
      /*0B50*/0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(16).fill(0x00),
      /*0B70*/0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0B80*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0B90*/0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      /*0BA0*/0x71, 0x2B, 0xFE, 0xF1, 0xF2, 0x54, 0x8A, 0x94, 0x06, 0x74, 0x43, 0xE9, 0x5D, 0xA3, 0x20, 0x46,
      /*0BB0*/0xF5, 0x9F, 0xDD, 0x32, 0x90, 0xC1, 0x54, 0xBA, 0x1E, 0xFC, 0x9B, 0xD7, 0x00, 0x00, 0x00, 0x00,
              ...Array(80).fill(0x00),
      /*0C10*/0x15, 0xBA, 0x6F, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(16).fill(0x00),
      /*0C30*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
      /*0C40*/0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(64).fill(0x00),
      /*0C90*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              ...Array(112).fill(0),
      /*0D10*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,       
              ...Array(4848).fill(0)
  ]);

  // write the object name
  contentBuffer.write(name, 0x140, 'ascii');
  contentBuffer.write(textureName, 0xC80, 'ascii');

  // bottom left
  contentBuffer.writeFloatLE(-hWidth, 0x5C0);   // x
  contentBuffer.writeFloatLE(0, 0x5C4);         // y
  contentBuffer.writeFloatLE(-hHeight, 0x5C8);  // z

  // bottom right
  contentBuffer.writeFloatLE(hWidth, 0x5E4);    // x
  contentBuffer.writeFloatLE(0, 0x5E8);         // y
  contentBuffer.writeFloatLE(-hHeight, 0x5EC);  // z

  // top left
  contentBuffer.writeFloatLE(-hWidth, 0x608);   // x
  contentBuffer.writeFloatLE(0, 0x60C);         // y
  contentBuffer.writeFloatLE(hHeight, 0x610);   // z

  // top right
  contentBuffer.writeFloatLE(hWidth, 0x62C);    // x
  contentBuffer.writeFloatLE(0, 0x630);         // y
  contentBuffer.writeFloatLE(hHeight, 0x634);   // z

  return new Promise((res, rej) => {
    
    zlib.deflateRaw(contentBuffer, (err, resultBuffer) => {
      if (err) {
        return rej(err);
      }
      const finalBuffer = Buffer.concat([
        headerBuffer,
        resultBuffer
      ])
      res(finalBuffer);
    });
  });
};

const generateYtyp = (name, width, height) => builder.buildObject({
  CMapTypes: {
    extensions:[""],
    archetypes: [
      {Item:[
        {$:{type:"CBaseArchetypeDef"},
        lodDist: [{ $: { value: 1000.000000 }}],
        flags: [{ $: { value: 32 }}],
        specialAttribute: [{ $: { value: 0 }}],
        bbMin: [{ $: { x: -width, y: -height, z:-0.00001 }}],
        bbMax: [{ $: { x: width, y: height, z: 0.00001 }}],
        bsCentre: [{ $: { x: 0.00000000, y: 0.00000000, z: 0.00000000 }}],
        bsRadius: [{ $: { value: Math.max(width, height) }}],
        hdTextureDist: [{ $: { value: 1000.000000 }}],
        name: [ name ],
        textureDictionary: [ name ],
        clipDictionary: [""],
        drawableDictionary: [""],
        physicsDictionary: [""],
        assetType: [ "ASSET_TYPE_DRAWABLE" ],
        assetName: [ name ],
        extensions :[""]
      }]}
    ],
    name: [""],
    dependencies: [""],
    compositeEntityTypes:[""]
  }
});

const generateYmap = (name, worldPosition, quaternion, p1, p2, lod = 800 ) => builder.buildObject({ 
  CMapData: {
    name: [ name ],
    parent: [""],
    flags: [{ $: { value: 32 }}],
    contentFlags: [{ $: { value: 1 }}],
    streamingExtentsMin: [{ $: {
      x: worldPosition.x + Math.min(p1.x, p2.x) - lod,
      y: worldPosition.y + Math.min(p1.y, p2.y) - lod,
      z: worldPosition.z + Math.min(p1.z, p2.z) - lod
    }}],
    streamingExtentsMax: [{ $: {
      x: worldPosition.x + Math.max(p1.x, p2.x) + lod,
      y: worldPosition.x + Math.max(p1.x, p2.x) + lod,
      z: worldPosition.x + Math.max(p1.x, p2.x) + lod
    }}],
    entitiesExtentsMin:  [{ $: {
      x: worldPosition.x + Math.min(p1.x, p2.x),
      y: worldPosition.y + Math.min(p1.y, p2.y),
      z: worldPosition.z + Math.min(p1.z, p2.z)
    }}],
    entitiesExtentsMax:  [{ $: {
      x: worldPosition.x + Math.max(p1.x, p2.x),
      y: worldPosition.y + Math.max(p1.y, p2.y),
      z: worldPosition.z + Math.max(p1.z, p2.z)
    }}],
    entities: [
      { Item: [{
        $: { type: "CEntityDef" },
        archetypeName: [ "suburban" ],
        flags: [{ $: { value: 0 }}],
        guid: [{ $: { value: 0 }}],
        position: [{ $: worldPosition }],
        rotation: [{ $: quaternion }],
        scaleXY: [ { $: { value: 1.00000000 }}],
        scaleZ: [ { $: { value: 1.00000000 }}],
        parentIndex: [ { $: { value: -1 }}],
        lodDist: [{ $: { value: 1000.00000000 }}],
        childLodDist: [ { $: { value: 0.00000000 }}],
        lodLevel: [ "LODTYPES_DEPTH_ORPHANHD" ],
        numChildren: [{ $: { value: 0 }}],
        priorityLevel: ["PRI_REQUIRED"],
        extensions: [""],
        ambientOcclusionMultiplier: [{ $: { value: 255 }}],
        artificialAmbientOcclusion: [{ $: { value: 255 }}],
        tintValue: [{ $: { value: 0 }}]}]}
    ],
    containerLods: [""],
    boxOccluders: [""],
    occludeModels: [""],
    physicsDictionaries: [""],
    instancedData: [{
      ImapLink: [""],
      PropInstanceList: [""],
      GrassInstanceList: [""]
    }],
    timeCycleModifiers: [""],
    carGenerators: [""],
    LODLightsSOA: [{
      direction: [""],
      falloff: [""],
      falloffExponent: [""],
      timeAndStateFlags: [""],
      hash: [""],
      coneInnerAngle: [""],
      coneOuterAngleOrCapExt: [""],
      coronaIntensity: [""]
    }],
    DistantLODLightsSOA: [{ position: [""], RGBI: ["" ], numStreetLights: [{ $: { value: 0 }}], category: [ { $: { value: 0 }}]}],
    block: [{ version: [{ $: { value: 0 }}], flags: [{ $: { value: 0 }}], name: [ name ], owner: [""] }]
  }
});


const generateManifest = (billboardNames) => builder.buildObject({
  CPackFileMetaData: {
    MapDataGroups: [""],
    HDTxdBindingArray: [""],
    imapDependencies: [""],
    itypDependencies_2: [""],
    Interiors: [""],
    imapDependencies_2: billboardNames.map((name) => ({
      Item: {
        imapName: name,
        manifestFlags: [""],
        itypDepArray: [{
          Item: name
        }]
      }
    }))
  }
});

(async () => {
  const billboards = JSON.parse(fs.readFileSync(path.join(__dirname, "definitions.json"), "utf8"));
  
  Object.keys(billboards).forEach(async (name) => {

    const { bottomLeft, topRight, worldPosition, offset } = billboards[name];

    const [ , x, y, z ] = worldPosition.match(/X:([^/s]+)Y:([^/s]+)Z:([^/s]+)/);

    const wX = Number(x);
    const wY = Number(y);
    const wZ = Number(z);

    const width = Math.sqrt(((topRight.x - bottomLeft.x) ** 2) + ((topRight.y - bottomLeft.y) ** 2));
    const height = Math.sqrt((topRight.z - bottomLeft.z) ** 2);

    const yaw = Math.atan2(topRight.y - bottomLeft.y, topRight.x - bottomLeft.x);
    
    let offsetPosition = {
      x: wX + (Math.sin(yaw) * offset),
      y: wY + ((-1 * Math.cos(yaw)) * offset),
      z: wZ
    };
   
    const ydRBuffer = await generateYdr(name, "texture", width, height);
    fs.writeFileSync(path.join(__dirname, "..", "raw", `${name}.ydr`), ydRBuffer);

    const ytyp = generateYtyp(name, width, height);
    fs.writeFileSync(path.join(__dirname, "..", "raw", `${name}.ytyp.xml`), ytyp);
    
    fs.copyFileSync(path.join(__dirname, "template.ytd"), path.join(__dirname, "..", "raw", `${name}.ytd`))

    const quaternion = Quaternion.fromEuler(0, 0, -yaw);
    const ymap = generateYmap(name, offsetPosition, { x: 0, y: 0, z: quaternion.y, w: quaternion.w }, bottomLeft, topRight);
    fs.writeFileSync(path.join(__dirname, "..", "raw", `${name}.ymap.xml`), ymap);
  });

  const manifest = generateManifest(Object.keys(billboards));
  fs.writeFileSync(path.join(__dirname, "..", "raw", "_manifest_billboards.ymf.xml"), manifest);
})();